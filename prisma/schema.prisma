// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String   @unique
  password       String
  profilePicture String?
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  playlists  Playlist[]
  likedSongs UserLikedSong[]
  followers  UserFollowing[] @relation("Followers")
  following  UserFollowing[] @relation("Following")
  history    History[]
}

model Artist {
  id             String   @id @default(uuid())
  name           String
  bio            String?
  profilePicture String?
  genre          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  albums Album[]
  songs  Song[]
}

model Album {
  id          String   @id @default(uuid())
  artistId    String
  title       String
  coverArt    String
  releaseYear String
  genre       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  songs  Song[]

  @@index([artistId])
}

model Song {
  id        String   @id @default(uuid())
  title     String
  artistId  String
  albumId   String?
  audioUrl  String
  duration  Int
  genre     String?
  playCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artist    Artist          @relation(fields: [artistId], references: [id], onDelete: Cascade)
  album     Album?          @relation(fields: [albumId], references: [id], onDelete: SetNull)
  likedBy   UserLikedSong[]
  playlists PlaylistSong[]
  history   History[]

  @@index([artistId])
  @@index([albumId])
}

model Playlist {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs PlaylistSong[]

  @@index([userId])
}

model PlaylistSong {
  id         String   @id @default(uuid())
  playlistId String
  songId     String
  position   Int
  addedAt    DateTime @default(now())

  // Relations
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song     Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, position])
  @@index([playlistId])
  @@index([songId])
}

model UserLikedSong {
  id      String   @id @default(uuid())
  userId  String
  songId  String
  likedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([userId])
  @@index([songId])
}

model UserFollowing {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  followedAt  DateTime @default(now())

  // Relations
  follower  User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model History {
  id           String   @id @default(uuid())
  userId       String
  songId       String
  playedAt     DateTime @default(now())
  playDuration Int

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([songId])
}
